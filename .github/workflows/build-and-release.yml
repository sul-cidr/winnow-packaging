name: Build executables and create release

on:
  workflow_dispatch:
    inputs:
      windows:
        type: boolean
        description: Build Windows .exe?
        default: true
      mac:
        type: boolean
        description: Build Mac OS .dmg?
        default: true
      release:
        type: boolean
        description: Publish release?
        default: true

jobs:
  build_frontend:
    name: Build Winnow UI Front-end Application
    runs-on: ubuntu-latest
    outputs:
      ui-version: ${{ steps.ui-version.outputs.version }}

    steps:
      - name: Checkout Winnow Repo
        uses: actions/checkout@v2
        with:
          repository: sul-cidr/ohtap-winnow
          ref: master
          path: winnow

      - name: Build Application
        env:
          # is process.env.CI is set, eslint warnings generated by the React source code
          #  are treated as errors and the build fails
          CI: false
        run: |
          cd ${GITHUB_WORKSPACE}/winnow
          npm install
          npm run build


      - name: Set UI Version
        id: ui-version
        run: |
          cd ${GITHUB_WORKSPACE}/winnow
          echo "::set-output name=version::$(node -p "require('./package.json').version")"

      - name: Upload Built Application
        uses: actions/upload-artifact@v2
        with:
          name: winnow-react-app
          path: ${{ github.workspace }}/winnow/build
          retention-days: 1


  build_windows_executable:
    name: Build Windows Executable
    runs-on: windows-latest
    needs: build_frontend
    if: github.event.inputs.windows == 'true'
    outputs:
      backend-version: ${{ steps.version.outputs.backend-version }}

    steps:
      - name: Checkout Main Repo
        uses: actions/checkout@v2
        with:
          path: main

      - name: Checkout Winnow Repo
        uses: actions/checkout@v2
        with:
          repository: sul-cidr/ohtap-winnow
          ref: cidr-2021
          path: winnow

      - name: Download (Built) Winnow UI Front-end Application
        uses: actions/download-artifact@v2
        with:
          name: winnow-react-app
          path: winnow-ui

      - name: Copy Winnow assets
        run: |
          Copy-Item -Path ${env:GITHUB_WORKSPACE}/winnow-ui -Recurse -Destination ${env:GITHUB_WORKSPACE}/main/winnow/www-data -Container
          cp ${env:GITHUB_WORKSPACE}/winnow/src/tool_script.py ${env:GITHUB_WORKSPACE}/main/winnow/

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Get Python Version
        id: get-python-version
        shell: bash
        run: |
          echo "::set-output name=python-version::$(python -c "import sys; print(sys.hexversion)")"

      - name: Cache
        uses: actions/cache@v2.1.1
        with:
          path: |
            ~/.cache/pip
            src/.venv
          key: ${{ runner.os }}-${{ steps.get-python-version.outputs.python-version }}-${{ hashFiles('Pipfile.lock') }}

      - name: Install Dependencies
        run: |
          cd ${env:GITHUB_WORKSPACE}/main
          pip install pipenv
          pipenv install

      - name: Set Version
        id: version
        run: |
          cd ${env:GITHUB_WORKSPACE}/main
          echo "::set-output name=backend-version::$(pipenv run python cli.py --version)"
          echo "::set-output name=version::${{needs.build_frontend.outputs.ui-version}}_$(pipenv run python cli.py --version)"

      - name: Build Windows Executable
        run: |
          cd ${env:GITHUB_WORKSPACE}/main
          pipenv run pyinstaller cli.py --hidden-import winnow.tool_script --onefile --name winnow-${{ steps.version.outputs.version }} --add-data "winnow;winnow"

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: winnow-windows-${{ steps.version.outputs.version }}
          path: ${{ github.workspace }}\main\dist\winnow-${{ steps.version.outputs.version }}.exe
          retention-days: 1


  build_mac_executable:
    name: Build Mac Executable
    runs-on: macos-latest
    needs: build_frontend
    if: github.event.inputs.mac == 'true'
    outputs:
      version: ${{ steps.backend-version.outputs.version }}

    steps:
      - name: Checkout Main Repo
        uses: actions/checkout@v2
        with:
          path: main

      - name: Checkout Winnow Repo
        uses: actions/checkout@v2
        with:
          repository: sul-cidr/ohtap-winnow
          ref: cidr-2021
          path: winnow

      - name: Download (Built) Winnow UI Front-end Application
        uses: actions/download-artifact@v2
        with:
          name: winnow-react-app
          path: winnow-ui

      - name: Copy Winnow assets
        run: |
          cp -av $GITHUB_WORKSPACE/winnow-ui $GITHUB_WORKSPACE/main/winnow/www-data
          cp $GITHUB_WORKSPACE/winnow/src/tool_script.py $GITHUB_WORKSPACE/main/winnow/

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Get Python Version
        id: get-python-version
        shell: bash
        run: |
          echo "::set-output name=python-version::$(python -c "import sys; print(sys.hexversion)")"

      - name: Cache
        uses: actions/cache@v2.1.1
        with:
          path: |
            ~/.cache/pip
            src/.venv
          key: ${{ runner.os }}-${{ steps.get-python-version.outputs.python-version }}-${{ hashFiles('Pipfile.lock') }}

      - name: Install Dependencies
        run: |
          cd $GITHUB_WORKSPACE/main
          pip install pipenv
          pipenv install

      - name: Set Version
        id: version
        run: |
          cd $GITHUB_WORKSPACE/main
          echo "::set-output name=backend-version::$(pipenv run python cli.py --version)"
          echo "::set-output name=version::${{needs.build_frontend.outputs.ui-version}}_$(pipenv run python cli.py --version)"

      - name: Build Mac Executable
        run: |
          cd $GITHUB_WORKSPACE/main
          pipenv run pyinstaller cli.py --hidden-import winnow.tool_script --onefile --name winnow-${{ steps.version.outputs.version }} --add-data winnow:winnow

      - name: Create DMG
        run: |
          cd $GITHUB_WORKSPACE/main
          hdiutil create -volname Winnow-${{ steps.version.outputs.version }} -srcfolder dist -ov -format UDZO dist/winnow-${{ steps.version.outputs.version }}.dmg

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: winnow-mac-${{ steps.version.outputs.version }}
          path: ${{ github.workspace }}/main/dist/winnow-${{ steps.version.outputs.version }}.dmg
          retention-days: 1


  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build_frontend, build_windows_executable, build_mac_executable]

    steps:
      - name: Set Version
        id: version
        run: |
          echo "::set-output name=version::${{needs.build_frontend.outputs.ui-version}}_${{needs.build_windows_executable.outputs.backend-version}}"

      - name: Create a Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          draft: false
          prerelease: false
          release_name: ${{ steps.version.outputs.version }}
          tag_name: v${{ steps.version.outputs.version }}
          body: |
            Version ${{ steps.version.outputs.version }}:
            - [Winnow UI](https://github.com/ohtap/subcorpora-tool) Version: ${{needs.build_frontend.outputs.ui-version}}
            - [API and Packaging](https://github.com/sul-cidr/winnow-packaging) Version: ${{needs.build_windows_executable.outputs.backend-version}}

      - name: Download Windows Executable
        uses: actions/download-artifact@v2
        with:
          name: winnow-windows-${{ steps.version.outputs.version }}
          path: dist

      - name: Upload Windows Executable to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/dist/winnow-${{ steps.version.outputs.version }}.exe
          asset_name: winnow-windows-${{ steps.version.outputs.version }}.exe
          asset_content_type: application/x-dosexec

      - name: Download Mac Executable
        uses: actions/download-artifact@v2
        with:
          name: winnow-mac-${{ steps.version.outputs.version }}
          path: dist

      - name: Upload Mac Executable to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/dist/winnow-${{ steps.version.outputs.version }}.dmg
          asset_name: winnow-mac-${{ steps.version.outputs.version }}.dmg
          asset_content_type: application/zlib
